service: users

custom: 
  stage: "${opt:stage, self:provider.stage}"
  tableName: ${self:service}-${self:custom.stage}
  devIAM: ''
  prodIAM: aws_iam

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  environment: 
    TABLE_NAME: ${self:custom.tableName}

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: ${self:custom.${self:custom.stage}IAM}
  list:
    handler: handler.list
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: ${self:custom.${self:custom.stage}IAM}
  get:
    handler: handler.get
    events:
      - http:
          path: users/{email}
          method: get
          cors: true
          authorizer: ${self:custom.${self:custom.stage}IAM}
  update:
    handler: handler.update
    events:
      - http:
          path: users/{email}
          method: put
          cors: true
          authorizer: ${self:custom.${self:custom.stage}IAM}

  delete:
    handler: handler.remove
    events:
      - http:
          path: users/{email}
          method: delete
          cors: true
          authorizer: ${self:custom.${self:custom.stage}IAM}

resources:  
  Resources:
    restTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5          
